from openai import OpenAI


def model_api_client() -> object:
    """Returns an instance of the OpenAI API client."""
    return OpenAI(
        api_key="KG6Dqaqx2APgaNYbqOCrRI5aBXitjbvO",
        base_url="https://api.lemonfox.ai/v1",
    )


def prompt_llm(client: object, prompt: str = "", role: str = "", temperature: int = 0.3) -> str:
    """Interacts with the LLM model to generate a response given the
    prompt and fillers.

    This function uses the OpenAI API client to interact with the LLM model.
    It sends a chat completion request to the model with a system message and a user message.
    The system message contains the role of the user and the user message is generated by filling the prompt with the provided fillers.
    The model then generates a response based on these messages.

    Args:
        client (object): An instance of the OpenAI API client.
        prompt (str): The prompt to be used for generating the response. This is a string that contains placeholders for the fillers.
        role (str): The role of the user. This is used in the system message sent to the model.
        temperature (int): The temperature parameter for the model. This controls the randomness of the generated response.

    Returns:
        str: The generated response from the LLM model.
    """
    return client.chat.completions.create(
        messages=[
            {"role": "system", "content": f"{role}"},
            {"role": "user", "content": f"{prompt}"},
        ],
        model="mixtral-chat",
        temperature=temperature,
    )

def make_impact_from_news(news_content, company_name, stock_position) -> str:
    """ Return either "positive" or "negative" for impact """
    client = model_api_client()

    fillers={
        'news_content': news_content,
        'position': stock_position,
        'company_name': company_name
    }

    prompt = create_news_x_stock_impact_prompt(fillers)

    # try LLM prompt 5 times before giving up
    trials = 0
    correct = False
    impact = "undetermined"
    while (trials < 4) and not correct:
        result = prompt_llm(client, prompt=prompt, role='').choices[0].message.content
        if result.lower()[0:8] == "positive":
            correct = True
            impact = "positive"
        elif result.lower()[0:8] == "negative":
            correct = True
            impact = "negative"
        trials = trials + 1
    return impact

def make_reasons_from_news(news_content, impact, company_name) -> str:    
    # Ask the LLM 3 reasons why the news has the estimated impact
    client = model_api_client()

    fillers={
        'news_content': news_content,
        'impact': impact,
        'company_name': company_name
    }

    prompt = create_reason_and_impact_prompt(fillers)
    reasons = prompt_llm(client, prompt=prompt, role='').choices[0].message.content
    return reasons

class DeferredFString:
    def __init__(self, template):
        self.template = template

    def fill(self, **kwargs):
        return self.template.format(**kwargs)


def create_operational_countries_prompt(fillers: dict) -> str:
    template = DeferredFString(
        """
        What are the countries in which the company {stock_name}, traded in the trade market {trading_market} operates?
        Return the answer as a python list of countries, names only, no other text,
        such as ['country1', 'country2',...].
        Use CAMEO codes to identify the countries.
        """
    )
    return template.fill(**fillers)


def create_news_summary_prompt(fillers: dict) -> str:
    template = DeferredFString(
        """
        I am providing you with the content of a news article. I need you to summarize it for me.
        Just return the summarised text, no other text, as a string.
        {article_content}
        """
    )
    return template.fill(**fillers)

def create_news_x_stock_impact_prompt(fillers: dict) -> str:
    template = DeferredFString(
        """
        You are a financial expert in trading. You read the following news article:
        "{news_content}"

        Does this news article impact your {position} position on {company_name} stocks positively or negatively? Answer with one word.
        """
    )
    return template.fill(**fillers)


def extract_operational_countries(row, role, client) -> list:
    """Extracts the operational countries of a company from the LLM model."""
    fillers = {
        'stock_name': row['company_name'],
        'trading_market': row['trading_market'],
        }
    prompt = create_operational_countries_prompt(fillers)
    countries = prompt_llm(client, prompt=prompt, role=role).choices[0].message.content
    countries_list = ast.literal_eval(countries)
    return countries_list

def create_reason_and_impact_prompt(fillers: dict) -> str:
    template = DeferredFString(
        """
        You are a financial expert in trading. You read the following news article: "{news_content}"
        
        You know that this news article impacts your {company_name} stocks in a {impact} way. Give three reasons why your stocks are impacted as such. Only return the three reasons as a numbered list.
        """
    )
    return template.fill(**fillers)